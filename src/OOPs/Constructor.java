package OOPs;

public class Constructor {

	
//	constructor :
//
//		once we create a object compilsory we should perform inicilization than only object in position to respond properly
//
//		whenever we are creating an object some pice of code will be executed automatically to perform inicilization of 
//		object this pice of code is nothing but constructor hence main purpose of constructor is to perform incilization of 
//		object

//	example
	
	
	String name;
	int rollNo;
	
	Constructor(String name,int rollNo){
		this(10.5);
		this.name = name;
		this.rollNo = rollNo;
	}
	
//	Note :
//
//	main purpose of constructor is to perform inicilization of object but not to create object
	
	
//	difference bet constructor and instance block
//
//	the main purpose of constructor is to perform inicilization of object
//	but otherthan inicilization if you to perfom any activity for every object creation than we should go for instance 
//	block (like updation one entry in database for every object creation are incrementing count value for every object creation etc)
//
//	both constructor and instance block have ther own different purpose and replace one concept with another concept may 
//	not work always
//
//	both constructor and instance block will be executed for every object creation but instance block first followed by 
//	construcor


//	rules of writing constructor
//
//	1. name of class and name of constructor must be matched
//	2. return type concept not applicable for constructor even void also
//	by mistick try to declare return type for constructor than we wont get any compile time error because compiler trist eit as a method hence it is ligial (stupited to have a methos who name is exectlty same as class name)
//
//	class test {
//
//	void test(){
//
//	System.out.println("method but not constructor");
//
//	}
//	public static void main(String[] args){
//
//	test t = new test();
//	t.test();
//
//	}
//	}
	
//	the only applicable modifier constructor are public , private , protected , default if are try to any other 
//	modifier we will get compile time error
	
//	compiler is responsible to generate default constructor (but not JVM)
//	if are not writing any constructor than only compiler will generate default constructor that is if are writing at 
//	list one constructor than compiler wont to generate default constructor hence ervery class in java can 
//	contain constructor it may be dafault constructor generated by compiler or customized conctrucor 
//	explicity provided by programmer but not both similtionsoly
	
//	prototype of default constructor
//
//	1. it is always no-arg constructor
//	2. the access modifier of default construstor is exectly same access modifier of class (this rule is applicable only 
//	for public and default)
//	3. it contain only one line super(); it is a no argument call to super class constructor
//
//	the first line inside constructor should erither super(); or this(); or not writing any thing than compiler will 
//	always place super();
//
//	case 1
//
//	we can take super or this only in first line in constructor if you aretrying to take anywher else will 
//	get compiler time error
//
//  case 2 
//
//  within constructor either take super or this but not simultinosy
//
//  case 3
//
//  we can use super or this only inside constructor if trying to use outside of constructor we will 
//  get compile time error
	
//	example
	
	Constructor(){
		this(10);
//		super();
//		this();  // Compiler Time Error : Constructor call must be the first statement in a constructor
		System.out.println("constructor");
//		super();  // Compile Time Error : Constructor call must be the first statement in a constructor
	}
	
	public void m1() {
//		super(); // Compiler Time Error : Constructor call must be the first statement in a constructor
		System.out.println("mathod");
	}
	
	int x = 100;
	
	
//	super() , this()
//
//	thes are constructor call to call super class and current class constructor
//
//	we can use only in constructor as first line
//
//	we can use only once in constructor
//
//	super , this
//
//	thes are keuword to refer super class and current class instance member
//
//	we can use anywhere except static area
//
//	we can use any no of times
//
//	class test{
//
//	public static void main(String[] arg){
//	System.out.println(super.hasCode());
//	}
//
//	}
	
//	overloaded constructor
//
//	within a class we can declare multiple constructor and all the constructor having same name but different 
//	type of argument hence all the constructor are consider as overloaded constructor hence overloading 
//	concept applicable for constructor
	
	Constructor(double d){
		System.out.println("double");
	}
	
//	for constructor inheritance and overriding concept are not applicable but overloading concept is applicable
//
//	every class in java including abstract class can contain constructor but interface cannot contain constructor
	
//	class test{
//
//		test(){
//		            // valid
//		}
//
//		}
//
//		abstract class test{
//
//		test(){
//		            // valid
//		}
//
//		}
//
//		interface test{
//
//		test(){
//		           // invalid
//		}
//
//		}
	
//     case 1
//
//     recursive method call is run time exception saying stackoverflowerror
//     but inover program if there is change of recursive constructor innocation than the code wont to compile and 
//     will get compile time error
	
	  public static void m3() {
		System.out.println("---->");
		m4();
	  }
	
	  public static void m4() {
		System.out.println("<-----");
		m3();
	  }
	
//	  Constructor(){
////		this(10);   // Compile Time Error : Recursive constructor invocation ConstructorExample1()
//	  }
//	
//	  Constructor(int i){
////		this();   // Compile Time Error : Recursive constructor invocation ConstructorExample1()
//	  }
	
//    case 2
//
//
//class p{
//
//}
//
//class c extends p{
//                            // valid
//}
//--------------------------------------------------------
//class p{
//
//p(){
//}
//
//}
//class c extends p{
//                            // valid
//}
//--------------------------------------------------------
//class p{
//                            
//p(int i){
//
//}
//
//}
//
//class c extends p{
//                         // in valid compile time error using paramer constructor use in parent class
//}
	  
//	 Note :
//
//   1. if parent class contain any argument constructor than while writing child class we have to take special care 
//   with respected to constructor
//
//   * 2.  wherever we are writing any argument constructor it is highly recommeded to write no arg constructor also
	  
//   case 3
//
//class p{
//
//p() throws IoException{
//
//}
//
//}
//
//class c extends p{
//c(){
//super();
//}
//
//}
//
//Compile Time Error : unreputed exception java.io.IoException in default constructor
//-----------------------------------------------------
//
//class p{
//p() throws IoException{
//}
//
//}
//
//class c extends p
//{
//
//c () throws IoException | Exception | Throwable{
//super();
//}
//
//}
	  
//	  Note :
//
//     if parent class constructor throws any checked exception compilsory child class exception throws same 
//     checked exception are its parent otherwise the code wont to compile
	  
//	  which of following statement is valid
//
//	  the main purpose of constructor is to create an object // invalid
//
//	  the main purposr constructor inicilization of object // valid
//
//	  name of constructor need not be same as class name // invalid
//
//	  return type concept applicaable for constructor but only valid // invali
//
//	  we can apply any modifier for constructor // invalid
//
//	  default constructor by JVM  // false
//
//	  compiler is responsible to generate defalut constructor // true
//
//	  compiler will always generate default constructor // false
//
//	  if you are not write no arg constructor than compiler generate default constructor // invalid
//
//	  every no argment is default constructor // false
//
//	  default constructor is always no arg constructor // true
//
//	  the first linein constructor should be super() or this if you no eriting anything than compiler 
//	  will generate this  //invalid
//
//	  for constructor both overlodiing or overriding concept applicable // invali
//
//	  for constructor for inheritance concept applicable but not not overriding // false
//
//	  only concert class can constructor but abstrct class cannot can not  / false
//
//	  interface can conatin constructor // invalid
//
//	  recursive construcor innocation run time exception // invalid
//
//	  if parent class constructor throws some cheched exeption than compilsory child throws exception 
//	  same exception or its child  // false


	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Constructor c = new Constructor("ak", 1);
		System.out.println(c.name + " " + c.rollNo);
		Constructor c1 = new Constructor("aki", 2);
		System.out.println(c1.name + " " + c1.rollNo);
	}

}
